/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export const ApiKeyType$zodSchema = z.enum([
  "api_keys",
]);

export type ApiKeyType = z.infer<typeof ApiKeyType$zodSchema>;

/**
 * The owner of the API Key
 */
export type ApiKeyUser = {
  id?: string | undefined;
  email?: string | undefined;
};

export const ApiKeyUser$zodSchema: z.ZodType<
  ApiKeyUser,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string().optional(),
  id: z.string().optional(),
}).describe("The owner of the API Key");

export type ApiKeyAttributes = {
  name?: string | undefined;
  api_version?: string | undefined;
  token_last_slice?: string | undefined;
  last_used_at?: string | undefined;
  user?: ApiKeyUser | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
};

export const ApiKeyAttributes$zodSchema: z.ZodType<
  ApiKeyAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  api_version: z.string().optional(),
  created_at: z.string().datetime({ offset: true }).optional(),
  last_used_at: z.string().datetime({ offset: true }).optional(),
  name: z.string().optional(),
  token_last_slice: z.string().optional(),
  updated_at: z.string().datetime({ offset: true }).optional(),
  user: z.lazy(() => ApiKeyUser$zodSchema).optional(),
});

export type ApiKey = {
  id?: string | undefined;
  type?: ApiKeyType | undefined;
  attributes?: ApiKeyAttributes | undefined;
};

export const ApiKey$zodSchema: z.ZodType<ApiKey, z.ZodTypeDef, unknown> = z
  .object({
    attributes: z.lazy(() => ApiKeyAttributes$zodSchema).optional(),
    id: z.string().optional(),
    type: ApiKeyType$zodSchema.optional(),
  });
