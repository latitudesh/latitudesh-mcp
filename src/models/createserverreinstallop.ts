/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export const CreateServerReinstallType2$zodSchema = z.enum([
  "reinstalls",
]);

export type CreateServerReinstallType2 = z.infer<
  typeof CreateServerReinstallType2$zodSchema
>;

/**
 * The OS selected for the reinstall process
 */
export const CreateServerReinstallOperatingSystem2$zodSchema = z.enum([
  "ipxe",
  "windows_server_2019_std_v1",
  "ubuntu_22_04_x64_lts",
  "debian_11",
  "debian_10",
  "rhel8",
  "windows_server_2012_r2_std_v28",
  "windows_server_2012_r2_dc_v5",
  "esxi_6_7",
  "debian_9_4_x64",
  "centos_7_4_x64",
  "centos_8_x64",
  "ubuntu_16_04_x64_lts",
  "ubuntu_20_04_x64_lts",
  "windows_server_2016_std_v1",
  "windows_server_2016_dc_v1",
  "windows_server_2019_dc_v1",
  "debian_12",
  "ubuntu22_ml_in_a_box",
  "ubuntu_18_04_x64_lts",
  "windows_server_2019_std_uefi",
  "windows_2022_std_uefi",
  "windows_2022_std",
  "ubuntu_24_04_x64_lts",
  "rockylinux_8",
]).describe("The OS selected for the reinstall process");

export type CreateServerReinstallOperatingSystem2 = z.infer<
  typeof CreateServerReinstallOperatingSystem2$zodSchema
>;

export type CreateServerReinstallPartition2 = {
  size_in_gb?: number | undefined;
  path?: string | undefined;
  filesystem_type?: string | undefined;
};

export const CreateServerReinstallPartition2$zodSchema: z.ZodType<
  CreateServerReinstallPartition2,
  z.ZodTypeDef,
  unknown
> = z.object({
  filesystem_type: z.string().optional(),
  path: z.string().optional(),
  size_in_gb: z.number().int().optional(),
});

/**
 * RAID mode for the server
 */
export const CreateServerReinstallRaid2$zodSchema = z.enum([
  "raid-0",
  "raid-1",
]).describe("RAID mode for the server");

export type CreateServerReinstallRaid2 = z.infer<
  typeof CreateServerReinstallRaid2$zodSchema
>;

export type CreateServerReinstallAttributes2 = {
  operating_system?: CreateServerReinstallOperatingSystem2 | undefined;
  hostname?: string | undefined;
  partitions?: Array<CreateServerReinstallPartition2> | undefined;
  ssh_keys?: Array<string> | undefined;
  user_data?: string | undefined;
  raid?: CreateServerReinstallRaid2 | undefined;
  ipxe?: string | undefined;
};

export const CreateServerReinstallAttributes2$zodSchema: z.ZodType<
  CreateServerReinstallAttributes2,
  z.ZodTypeDef,
  unknown
> = z.object({
  hostname: z.string().optional(),
  ipxe: z.string().optional(),
  operating_system: CreateServerReinstallOperatingSystem2$zodSchema.optional(),
  partitions: z.array(z.lazy(() => CreateServerReinstallPartition2$zodSchema))
    .optional(),
  raid: CreateServerReinstallRaid2$zodSchema.optional(),
  ssh_keys: z.array(z.string()).optional(),
  user_data: z.string().optional(),
});

export type CreateServerReinstallData2 = {
  type: CreateServerReinstallType2;
  attributes?: CreateServerReinstallAttributes2 | undefined;
};

export const CreateServerReinstallData2$zodSchema: z.ZodType<
  CreateServerReinstallData2,
  z.ZodTypeDef,
  unknown
> = z.object({
  attributes: z.lazy(() => CreateServerReinstallAttributes2$zodSchema)
    .optional(),
  type: CreateServerReinstallType2$zodSchema,
});

export type CreateServerReinstallRequestBody2 = {
  data: CreateServerReinstallData2;
};

export const CreateServerReinstallRequestBody2$zodSchema: z.ZodType<
  CreateServerReinstallRequestBody2,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => CreateServerReinstallData2$zodSchema),
});

export type CreateServerReinstallRequest = {
  server_id: string;
  RequestBody: CreateServerReinstallRequestBody2;
};

export const CreateServerReinstallRequest$zodSchema: z.ZodType<
  CreateServerReinstallRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  RequestBody: z.lazy(() => CreateServerReinstallRequestBody2$zodSchema),
  server_id: z.string(),
});

export type CreateServerReinstallResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
};

export const CreateServerReinstallResponse$zodSchema: z.ZodType<
  CreateServerReinstallResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
});
