/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { SshKeyData, SshKeyData$zodSchema } from "./sshkeydata.js";

export const PutProjectSshKeyType2$zodSchema = z.enum([
  "ssh_keys",
]);

export type PutProjectSshKeyType2 = z.infer<
  typeof PutProjectSshKeyType2$zodSchema
>;

export type PutProjectSshKeyAttributes2 = {
  tags?: Array<string> | undefined;
  name?: string | undefined;
};

export const PutProjectSshKeyAttributes2$zodSchema: z.ZodType<
  PutProjectSshKeyAttributes2,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().default("New SSH Key Name"),
  tags: z.array(z.string()).optional(),
});

export type PutProjectSshKeyData2 = {
  id?: string | undefined;
  type: PutProjectSshKeyType2;
  attributes?: PutProjectSshKeyAttributes2 | undefined;
};

export const PutProjectSshKeyData2$zodSchema: z.ZodType<
  PutProjectSshKeyData2,
  z.ZodTypeDef,
  unknown
> = z.object({
  attributes: z.lazy(() => PutProjectSshKeyAttributes2$zodSchema).optional(),
  id: z.string().default("ssh_81EVOtR1N4J2Z"),
  type: PutProjectSshKeyType2$zodSchema,
});

export type PutProjectSshKeyRequestBody2 = { data: PutProjectSshKeyData2 };

export const PutProjectSshKeyRequestBody2$zodSchema: z.ZodType<
  PutProjectSshKeyRequestBody2,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => PutProjectSshKeyData2$zodSchema),
});

export type PutProjectSshKeyRequest = {
  project_id: string;
  ssh_key_id: string;
  RequestBody: PutProjectSshKeyRequestBody2;
};

export const PutProjectSshKeyRequest$zodSchema: z.ZodType<
  PutProjectSshKeyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  RequestBody: z.lazy(() => PutProjectSshKeyRequestBody2$zodSchema),
  project_id: z.string().describe("Project ID or Slug"),
  ssh_key_id: z.string(),
});

/**
 * Success
 */
export type PutProjectSshKeyResponseBody = { data?: SshKeyData | undefined };

export const PutProjectSshKeyResponseBody$zodSchema: z.ZodType<
  PutProjectSshKeyResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: SshKeyData$zodSchema.optional(),
}).describe("Success");

export type PutProjectSshKeyResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  object?: PutProjectSshKeyResponseBody | undefined;
};

export const PutProjectSshKeyResponse$zodSchema: z.ZodType<
  PutProjectSshKeyResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  object: z.lazy(() => PutProjectSshKeyResponseBody$zodSchema).optional(),
});
