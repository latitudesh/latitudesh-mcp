/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ProjectInclude, ProjectInclude$zodSchema } from "./projectinclude.js";
import {
  ServerRegionResourceData,
  ServerRegionResourceData$zodSchema,
} from "./serverregionresourcedata.js";
import { TeamInclude, TeamInclude$zodSchema } from "./teaminclude.js";

/**
 * `on` - The server is powered ON
 *
 * @remarks
 * `off` - The server is powered OFF
 * `unknown` - The server power status is unknown
 * `ready` - The server is in reinstalling state `ready` and should start `disk_erasing` shortly
 * `disk_erasing` - The server is in reinstalling state `disk_erasing`
 * `failed_disk_erasing` - The server has failed disk erasing in reinstall
 * `deploying` - The server is in the last reinstalling stage and is `deploying`
 * `failed_deployment` - The server has failed deployment in reinstall
 */
export const ServerDataStatus$zodSchema = z.enum([
  "on",
  "off",
  "unknown",
  "ready",
  "disk_erasing",
  "failed_disk_erasing",
  "deploying",
  "failed_deployment",
]).describe(
  "`on` - The server is powered ON\n"
    + "`off` - The server is powered OFF\n"
    + "`unknown` - The server power status is unknown\n"
    + "`ready` - The server is in reinstalling state `ready` and should start `disk_erasing` shortly\n"
    + "`disk_erasing` - The server is in reinstalling state `disk_erasing`\n"
    + "`failed_disk_erasing` - The server has failed disk erasing in reinstall\n"
    + "`deploying` - The server is in the last reinstalling stage and is `deploying`\n"
    + "`failed_deployment` - The server has failed deployment in reinstall\n"
    + "",
);

export type ServerDataStatus = z.infer<typeof ServerDataStatus$zodSchema>;

export const IpmiStatus$zodSchema = z.enum([
  "Unavailable",
  "Intermittent",
  "Normal",
]);

export type IpmiStatus = z.infer<typeof IpmiStatus$zodSchema>;

export type ServerDataPlan = {
  id?: string | undefined;
  name?: string | undefined;
  slug?: string | undefined;
  billing?: string | undefined;
};

export const ServerDataPlan$zodSchema: z.ZodType<
  ServerDataPlan,
  z.ZodTypeDef,
  unknown
> = z.object({
  billing: z.string().optional(),
  id: z.string().optional(),
  name: z.string().optional(),
  slug: z.string().optional(),
});

export type ServerDataFeatures = {
  raid?: boolean | undefined;
  ssh_keys?: boolean | undefined;
  user_data?: boolean | undefined;
};

export const ServerDataFeatures$zodSchema: z.ZodType<
  ServerDataFeatures,
  z.ZodTypeDef,
  unknown
> = z.object({
  raid: z.boolean().optional(),
  ssh_keys: z.boolean().optional(),
  user_data: z.boolean().optional(),
});

export type Distro = {
  name?: string | undefined;
  slug?: string | undefined;
  series?: string | undefined;
};

export const Distro$zodSchema: z.ZodType<Distro, z.ZodTypeDef, unknown> = z
  .object({
    name: z.string().optional(),
    series: z.string().optional(),
    slug: z.string().optional(),
  });

export type OperatingSystem = {
  name?: string | undefined;
  slug?: string | undefined;
  version?: string | undefined;
  features?: ServerDataFeatures | undefined;
  distro?: Distro | undefined;
};

export const OperatingSystem$zodSchema: z.ZodType<
  OperatingSystem,
  z.ZodTypeDef,
  unknown
> = z.object({
  distro: z.lazy(() => Distro$zodSchema).optional(),
  features: z.lazy(() => ServerDataFeatures$zodSchema).optional(),
  name: z.string().optional(),
  slug: z.string().optional(),
  version: z.string().optional(),
});

export type ServerDataSpecs = {
  cpu?: string | undefined;
  disk?: string | undefined;
  ram?: string | undefined;
  nic?: string | undefined;
  gpu?: string | undefined;
};

export const ServerDataSpecs$zodSchema: z.ZodType<
  ServerDataSpecs,
  z.ZodTypeDef,
  unknown
> = z.object({
  cpu: z.string().optional(),
  disk: z.string().optional(),
  gpu: z.string().optional(),
  nic: z.string().optional(),
  ram: z.string().optional(),
});

export const ServerDataRole$zodSchema = z.enum([
  "external",
  "internal",
  "ipmi",
  "unknown",
]);

export type ServerDataRole = z.infer<typeof ServerDataRole$zodSchema>;

export type Interface = {
  role?: ServerDataRole | undefined;
  name?: string | undefined;
  mac_address?: string | undefined;
  description?: string | undefined;
};

export const Interface$zodSchema: z.ZodType<Interface, z.ZodTypeDef, unknown> =
  z.object({
    description: z.string().optional(),
    mac_address: z.string().optional(),
    name: z.string().optional(),
    role: ServerDataRole$zodSchema.optional(),
  });

export type ServerDataAttributes = {
  hostname?: string | undefined;
  label?: string | undefined;
  status?: ServerDataStatus | undefined;
  ipmi_status?: IpmiStatus | undefined;
  role?: string | undefined;
  site?: string | undefined;
  locked?: boolean | undefined;
  rescue?: boolean | undefined;
  primary_ipv4?: string | undefined;
  primary_ipv6?: string | undefined;
  created_at?: string | undefined;
  scheduled_deletion_at?: string | undefined;
  plan?: ServerDataPlan | undefined;
  operating_system?: OperatingSystem | undefined;
  region?: ServerRegionResourceData | undefined;
  specs?: ServerDataSpecs | undefined;
  interfaces?: Array<Interface> | undefined;
  project?: ProjectInclude | undefined;
  team?: TeamInclude | undefined;
};

export const ServerDataAttributes$zodSchema: z.ZodType<
  ServerDataAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().optional(),
  hostname: z.string().optional(),
  interfaces: z.array(z.lazy(() => Interface$zodSchema)).optional(),
  ipmi_status: IpmiStatus$zodSchema.optional(),
  label: z.string().optional(),
  locked: z.boolean().optional(),
  operating_system: z.lazy(() => OperatingSystem$zodSchema).optional(),
  plan: z.lazy(() => ServerDataPlan$zodSchema).optional(),
  primary_ipv4: z.string().optional(),
  primary_ipv6: z.string().optional(),
  project: ProjectInclude$zodSchema.optional(),
  region: ServerRegionResourceData$zodSchema.optional(),
  rescue: z.boolean().optional(),
  role: z.string().optional(),
  scheduled_deletion_at: z.string().optional(),
  site: z.string().optional(),
  specs: z.lazy(() => ServerDataSpecs$zodSchema).optional(),
  status: ServerDataStatus$zodSchema.optional(),
  team: TeamInclude$zodSchema.optional(),
});

export type ServerData = {
  id?: string | undefined;
  type?: string | undefined;
  attributes?: ServerDataAttributes | undefined;
};

export const ServerData$zodSchema: z.ZodType<
  ServerData,
  z.ZodTypeDef,
  unknown
> = z.object({
  attributes: z.lazy(() => ServerDataAttributes$zodSchema).optional(),
  id: z.string().optional(),
  type: z.string().optional(),
});
