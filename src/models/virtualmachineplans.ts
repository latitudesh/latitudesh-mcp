/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The type of the resource
 */
export const VirtualMachinePlansType$zodSchema = z.enum([
  "virtual_machine_plans",
]).describe("The type of the resource");

export type VirtualMachinePlansType = z.infer<
  typeof VirtualMachinePlansType$zodSchema
>;

/**
 * The type of the disk
 */
export const TypeLocal$zodSchema = z.enum([
  "local",
]).describe("The type of the disk");

export type TypeLocal = z.infer<typeof TypeLocal$zodSchema>;

/**
 * The unit of the disk size
 */
export const VirtualMachinePlansUnit$zodSchema = z.enum([
  "gib",
]).describe("The unit of the disk size");

export type VirtualMachinePlansUnit = z.infer<
  typeof VirtualMachinePlansUnit$zodSchema
>;

export type Size = {
  amount?: number | undefined;
  unit?: VirtualMachinePlansUnit | undefined;
};

export const Size$zodSchema: z.ZodType<Size, z.ZodTypeDef, unknown> = z.object({
  amount: z.number().int().optional(),
  unit: VirtualMachinePlansUnit$zodSchema.optional(),
});

export type Disk = { type?: TypeLocal | undefined; size?: Size | undefined };

export const Disk$zodSchema: z.ZodType<Disk, z.ZodTypeDef, unknown> = z.object({
  size: z.lazy(() => Size$zodSchema).optional(),
  type: TypeLocal$zodSchema.optional(),
});

export type VirtualMachinePlansSpecs = {
  memory?: number | undefined;
  vcpus?: number | undefined;
  disk?: Disk | undefined;
};

export const VirtualMachinePlansSpecs$zodSchema: z.ZodType<
  VirtualMachinePlansSpecs,
  z.ZodTypeDef,
  unknown
> = z.object({
  disk: z.lazy(() => Disk$zodSchema).optional(),
  memory: z.number().int().optional(),
  vcpus: z.number().int().optional(),
});

export type VirtualMachinePlansUSD = {
  hour?: number | undefined;
  month?: number | undefined;
  year?: number | undefined;
};

export const VirtualMachinePlansUSD$zodSchema: z.ZodType<
  VirtualMachinePlansUSD,
  z.ZodTypeDef,
  unknown
> = z.object({
  hour: z.number().optional(),
  month: z.number().optional(),
  year: z.number().optional(),
});

export type VirtualMachinePlansBRL = {
  hour?: number | undefined;
  month?: number | undefined;
  year?: number | undefined;
};

export const VirtualMachinePlansBRL$zodSchema: z.ZodType<
  VirtualMachinePlansBRL,
  z.ZodTypeDef,
  unknown
> = z.object({
  hour: z.number().optional(),
  month: z.number().optional(),
  year: z.number().optional(),
});

export type VirtualMachinePlansPricing = {
  USD?: VirtualMachinePlansUSD | undefined;
  BRL?: VirtualMachinePlansBRL | undefined;
};

export const VirtualMachinePlansPricing$zodSchema: z.ZodType<
  VirtualMachinePlansPricing,
  z.ZodTypeDef,
  unknown
> = z.object({
  BRL: z.lazy(() => VirtualMachinePlansBRL$zodSchema).optional(),
  USD: z.lazy(() => VirtualMachinePlansUSD$zodSchema).optional(),
});

export type VirtualMachinePlansRegion = {
  name?: string | undefined;
  available?: Array<string> | undefined;
  pricing?: VirtualMachinePlansPricing | undefined;
};

export const VirtualMachinePlansRegion$zodSchema: z.ZodType<
  VirtualMachinePlansRegion,
  z.ZodTypeDef,
  unknown
> = z.object({
  available: z.array(z.string()).optional(),
  name: z.string().optional(),
  pricing: z.lazy(() => VirtualMachinePlansPricing$zodSchema).optional(),
});

/**
 * The stock level of the plan
 */
export const VirtualMachinePlansStockLevel$zodSchema = z.enum([
  "low",
]).describe("The stock level of the plan");

export type VirtualMachinePlansStockLevel = z.infer<
  typeof VirtualMachinePlansStockLevel$zodSchema
>;

export type VirtualMachinePlansAttributes = {
  name?: string | undefined;
  specs?: VirtualMachinePlansSpecs | undefined;
  regions?: Array<VirtualMachinePlansRegion> | undefined;
  stock_level?: VirtualMachinePlansStockLevel | undefined;
};

export const VirtualMachinePlansAttributes$zodSchema: z.ZodType<
  VirtualMachinePlansAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  regions: z.array(z.lazy(() => VirtualMachinePlansRegion$zodSchema))
    .optional(),
  specs: z.lazy(() => VirtualMachinePlansSpecs$zodSchema).optional(),
  stock_level: VirtualMachinePlansStockLevel$zodSchema.optional(),
});

export type VirtualMachinePlansData = {
  id?: string | undefined;
  type?: VirtualMachinePlansType | undefined;
  attributes?: VirtualMachinePlansAttributes | undefined;
};

export const VirtualMachinePlansData$zodSchema: z.ZodType<
  VirtualMachinePlansData,
  z.ZodTypeDef,
  unknown
> = z.object({
  attributes: z.lazy(() => VirtualMachinePlansAttributes$zodSchema).optional(),
  id: z.string().optional(),
  type: VirtualMachinePlansType$zodSchema.optional(),
});

export type VirtualMachinePlans = {
  data?: Array<VirtualMachinePlansData> | undefined;
};

export const VirtualMachinePlans$zodSchema: z.ZodType<
  VirtualMachinePlans,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(z.lazy(() => VirtualMachinePlansData$zodSchema)).optional(),
});
