/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ProjectInclude, ProjectInclude$zodSchema } from "./projectinclude.js";
import { TeamInclude, TeamInclude$zodSchema } from "./teaminclude.js";

export const VirtualMachineAttributesType$zodSchema = z.enum([
  "virtual_machines",
]);

export type VirtualMachineAttributesType = z.infer<
  typeof VirtualMachineAttributesType$zodSchema
>;

export const VirtualMachineAttributesStatus$zodSchema = z.enum([
  "Running",
  "Configuring network",
  "Starting",
  "Scheduling",
  "Scheduled",
]);

export type VirtualMachineAttributesStatus = z.infer<
  typeof VirtualMachineAttributesStatus$zodSchema
>;

export type VirtualMachineAttributesCredentials = {
  username?: string | undefined;
  host?: string | undefined;
  password?: string | undefined;
  ssh_keys?: Array<string> | undefined;
};

export const VirtualMachineAttributesCredentials$zodSchema: z.ZodType<
  VirtualMachineAttributesCredentials,
  z.ZodTypeDef,
  unknown
> = z.object({
  host: z.string().optional(),
  password: z.string().optional(),
  ssh_keys: z.array(z.string()).optional(),
  username: z.string().optional(),
});

export type VirtualMachineAttributesPlan = {
  id?: string | undefined;
  name?: string | undefined;
};

export const VirtualMachineAttributesPlan$zodSchema: z.ZodType<
  VirtualMachineAttributesPlan,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
});

export type VirtualMachineAttributesSpecs = {
  vcpu?: number | undefined;
  ram?: string | undefined;
  storage?: string | undefined;
  nic?: string | undefined;
  gpu?: string | undefined;
};

export const VirtualMachineAttributesSpecs$zodSchema: z.ZodType<
  VirtualMachineAttributesSpecs,
  z.ZodTypeDef,
  unknown
> = z.object({
  gpu: z.string().optional(),
  nic: z.string().optional(),
  ram: z.string().optional(),
  storage: z.string().optional(),
  vcpu: z.number().int().optional(),
});

export type VirtualMachineAttributesAttributes = {
  name?: string | undefined;
  created_at?: string | undefined;
  status?: VirtualMachineAttributesStatus | undefined;
  operating_system?: string | undefined;
  credentials?: VirtualMachineAttributesCredentials | undefined;
  plan?: VirtualMachineAttributesPlan | undefined;
  specs?: VirtualMachineAttributesSpecs | undefined;
  team?: TeamInclude | undefined;
  project?: ProjectInclude | undefined;
};

export const VirtualMachineAttributesAttributes$zodSchema: z.ZodType<
  VirtualMachineAttributesAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().optional(),
  credentials: z.lazy(() => VirtualMachineAttributesCredentials$zodSchema)
    .optional(),
  name: z.string().optional(),
  operating_system: z.string().optional(),
  plan: z.lazy(() => VirtualMachineAttributesPlan$zodSchema).optional(),
  project: ProjectInclude$zodSchema.optional(),
  specs: z.lazy(() => VirtualMachineAttributesSpecs$zodSchema).optional(),
  status: VirtualMachineAttributesStatus$zodSchema.optional(),
  team: TeamInclude$zodSchema.optional(),
});

export type VirtualMachineAttributes = {
  id?: string | undefined;
  type?: VirtualMachineAttributesType | undefined;
  attributes?: VirtualMachineAttributesAttributes | undefined;
};

export const VirtualMachineAttributes$zodSchema: z.ZodType<
  VirtualMachineAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  attributes: z.lazy(() => VirtualMachineAttributesAttributes$zodSchema)
    .optional(),
  id: z.string().optional(),
  type: VirtualMachineAttributesType$zodSchema.optional(),
});
