/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { Server, Server$zodSchema } from "./server.js";

export const UpdateServerType2$zodSchema = z.enum([
  "servers",
]);

export type UpdateServerType2 = z.infer<typeof UpdateServerType2$zodSchema>;

/**
 * The server billing type. Accepts `hourly` and `monthly` for on demand projects and `yearly` for reserved projects.
 */
export const UpdateServerBilling2$zodSchema = z.enum([
  "hourly",
  "monthly",
  "yearly",
]).describe(
  "The server billing type. Accepts `hourly` and `monthly` for on demand projects and `yearly` for reserved projects.",
);

export type UpdateServerBilling2 = z.infer<
  typeof UpdateServerBilling2$zodSchema
>;

export type UpdateServerAttributes2 = {
  hostname?: string | undefined;
  billing?: UpdateServerBilling2 | undefined;
  tags?: Array<string> | undefined;
  project?: string | undefined;
};

export const UpdateServerAttributes2$zodSchema: z.ZodType<
  UpdateServerAttributes2,
  z.ZodTypeDef,
  unknown
> = z.object({
  billing: UpdateServerBilling2$zodSchema.optional(),
  hostname: z.string().default("new-hostname"),
  project: z.string().optional(),
  tags: z.array(z.string()).optional(),
});

export type UpdateServerData2 = {
  id?: string | undefined;
  type?: UpdateServerType2 | undefined;
  attributes?: UpdateServerAttributes2 | undefined;
};

export const UpdateServerData2$zodSchema: z.ZodType<
  UpdateServerData2,
  z.ZodTypeDef,
  unknown
> = z.object({
  attributes: z.lazy(() => UpdateServerAttributes2$zodSchema).optional(),
  id: z.string().default("sv_81EVOtR1N4J2Z"),
  type: UpdateServerType2$zodSchema.optional(),
});

export type UpdateServerRequestBody2 = { data?: UpdateServerData2 | undefined };

export const UpdateServerRequestBody2$zodSchema: z.ZodType<
  UpdateServerRequestBody2,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => UpdateServerData2$zodSchema).optional(),
});

export type UpdateServerRequest = {
  server_id: string;
  RequestBody: UpdateServerRequestBody2;
};

export const UpdateServerRequest$zodSchema: z.ZodType<
  UpdateServerRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  RequestBody: z.lazy(() => UpdateServerRequestBody2$zodSchema),
  server_id: z.string(),
});

export type UpdateServerResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  server?: Server | undefined;
};

export const UpdateServerResponse$zodSchema: z.ZodType<
  UpdateServerResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  server: Server$zodSchema.optional(),
});
