/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { ProjectInclude, ProjectInclude$zodSchema } from "./projectinclude.js";
import { UserInclude, UserInclude$zodSchema } from "./userinclude.js";

export type TeamBilling = {
  id?: string | undefined;
  customer_billing_id?: string | undefined;
};

export const TeamBilling$zodSchema: z.ZodType<
  TeamBilling,
  z.ZodTypeDef,
  unknown
> = z.object({
  customer_billing_id: z.string().optional(),
  id: z.string().optional(),
});

export type TeamAttributes = {
  name?: string | undefined;
  slug?: string | undefined;
  description?: string | undefined;
  address?: string | undefined;
  currency?: string | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
  enforce_mfa?: boolean | undefined;
  users?: Array<UserInclude> | undefined;
  projects?: Array<ProjectInclude> | undefined;
  owner?: UserInclude | undefined;
  billing?: TeamBilling | undefined;
  feature_flags?: Array<string> | undefined;
};

export const TeamAttributes$zodSchema: z.ZodType<
  TeamAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  address: z.string().optional(),
  billing: z.lazy(() => TeamBilling$zodSchema).optional(),
  created_at: z.string().optional(),
  currency: z.string().optional(),
  description: z.string().optional(),
  enforce_mfa: z.boolean().optional(),
  feature_flags: z.array(z.string()).optional(),
  name: z.string().optional(),
  owner: UserInclude$zodSchema.optional(),
  projects: z.array(ProjectInclude$zodSchema).optional(),
  slug: z.string().optional(),
  updated_at: z.string().optional(),
  users: z.array(UserInclude$zodSchema).optional(),
});

export type Team = {
  id?: string | undefined;
  attributes?: TeamAttributes | undefined;
};

export const Team$zodSchema: z.ZodType<Team, z.ZodTypeDef, unknown> = z.object({
  attributes: z.lazy(() => TeamAttributes$zodSchema).optional(),
  id: z.string().optional(),
});
