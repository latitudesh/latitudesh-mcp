/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { TeamInclude, TeamInclude$zodSchema } from "./teaminclude.js";

export const BillingType$zodSchema = z.enum([
  "Yearly",
  "Monthly",
  "Hourly",
  "Normal",
  "Custom",
]);

export type BillingType = z.infer<typeof BillingType$zodSchema>;

export const BillingMethod$zodSchema = z.enum([
  "Normal",
  "95th percentile",
]);

export type BillingMethod = z.infer<typeof BillingMethod$zodSchema>;

export const Environment$zodSchema = z.enum([
  "Development",
  "Staging",
  "Production",
]);

export type Environment = z.infer<typeof Environment$zodSchema>;

export type ProjectStats = {
  ip_addresses?: number | undefined;
  prefixes?: number | undefined;
  servers?: number | undefined;
  containers?: number | undefined;
  vlans?: number | undefined;
};

export const ProjectStats$zodSchema: z.ZodType<
  ProjectStats,
  z.ZodTypeDef,
  unknown
> = z.object({
  containers: z.number().optional(),
  ip_addresses: z.number().optional(),
  prefixes: z.number().optional(),
  servers: z.number().optional(),
  vlans: z.number().optional(),
});

export type ProjectBilling = {
  subscription_id?: string | undefined;
  type?: string | undefined;
  method?: string | undefined;
};

export const ProjectBilling$zodSchema: z.ZodType<
  ProjectBilling,
  z.ZodTypeDef,
  unknown
> = z.object({
  method: z.string().optional(),
  subscription_id: z.string().optional(),
  type: z.string().optional(),
});

export type ProjectAttributes = {
  name?: string | undefined;
  slug?: string | undefined;
  description?: string | undefined;
  billing_type?: BillingType | undefined;
  billing_method?: BillingMethod | undefined;
  cost?: string | undefined;
  environment?: Environment | undefined;
  stats?: ProjectStats | undefined;
  billing?: ProjectBilling | undefined;
  team?: TeamInclude | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
};

export const ProjectAttributes$zodSchema: z.ZodType<
  ProjectAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  billing: z.lazy(() => ProjectBilling$zodSchema).optional(),
  billing_method: BillingMethod$zodSchema.optional(),
  billing_type: BillingType$zodSchema.optional(),
  cost: z.string().optional(),
  created_at: z.string().optional(),
  description: z.string().optional(),
  environment: Environment$zodSchema.optional(),
  name: z.string().optional(),
  slug: z.string().optional(),
  stats: z.lazy(() => ProjectStats$zodSchema).optional(),
  team: TeamInclude$zodSchema.optional(),
  updated_at: z.string().optional(),
});

export type Project = {
  id?: string | undefined;
  attributes?: ProjectAttributes | undefined;
};

export const Project$zodSchema: z.ZodType<Project, z.ZodTypeDef, unknown> = z
  .object({
    attributes: z.lazy(() => ProjectAttributes$zodSchema).optional(),
    id: z.string().optional(),
  });
