/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export type UserIncludeRole = {
  id?: string | undefined;
  name?: string | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
};

export const UserIncludeRole$zodSchema: z.ZodType<
  UserIncludeRole,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().optional(),
  id: z.string().optional(),
  name: z.string().optional(),
  updated_at: z.string().optional(),
});

export type UserInclude = {
  id?: string | undefined;
  first_name?: string | undefined;
  last_name?: string | undefined;
  email?: string | undefined;
  authentication_factor_id?: string | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
  role?: UserIncludeRole | undefined;
};

export const UserInclude$zodSchema: z.ZodType<
  UserInclude,
  z.ZodTypeDef,
  unknown
> = z.object({
  authentication_factor_id: z.string().optional(),
  created_at: z.string().optional(),
  email: z.string().optional(),
  first_name: z.string().optional(),
  id: z.string().optional(),
  last_name: z.string().optional(),
  role: z.lazy(() => UserIncludeRole$zodSchema).optional(),
  updated_at: z.string().optional(),
});
