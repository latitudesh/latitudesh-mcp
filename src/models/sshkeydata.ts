/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { UserInclude, UserInclude$zodSchema } from "./userinclude.js";

export const SshKeyDataType$zodSchema = z.enum([
  "ssh_keys",
]);

export type SshKeyDataType = z.infer<typeof SshKeyDataType$zodSchema>;

export type SshKeyDataAttributes = {
  name?: string | undefined;
  public_key?: string | undefined;
  fingerprint?: string | undefined;
  user?: UserInclude | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
};

export const SshKeyDataAttributes$zodSchema: z.ZodType<
  SshKeyDataAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().optional(),
  fingerprint: z.string().optional(),
  name: z.string().optional(),
  public_key: z.string().optional(),
  updated_at: z.string().optional(),
  user: UserInclude$zodSchema.optional(),
});

export type SshKeyData = {
  id?: string | undefined;
  type: SshKeyDataType;
  attributes?: SshKeyDataAttributes | undefined;
};

export const SshKeyData$zodSchema: z.ZodType<
  SshKeyData,
  z.ZodTypeDef,
  unknown
> = z.object({
  attributes: z.lazy(() => SshKeyDataAttributes$zodSchema).optional(),
  id: z.string().optional(),
  type: SshKeyDataType$zodSchema,
});
