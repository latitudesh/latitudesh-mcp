/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { UserData, UserData$zodSchema } from "./userdata.js";

export const PostProjectUserDataType2$zodSchema = z.enum([
  "user_data",
]);

export type PostProjectUserDataType2 = z.infer<
  typeof PostProjectUserDataType2$zodSchema
>;

export type PostProjectUserDataAttributes2 = {
  description: string;
  content: string;
};

export const PostProjectUserDataAttributes2$zodSchema: z.ZodType<
  PostProjectUserDataAttributes2,
  z.ZodTypeDef,
  unknown
> = z.object({
  content: z.string(),
  description: z.string(),
});

export type PostProjectUserDataData2 = {
  type: PostProjectUserDataType2;
  attributes?: PostProjectUserDataAttributes2 | undefined;
};

export const PostProjectUserDataData2$zodSchema: z.ZodType<
  PostProjectUserDataData2,
  z.ZodTypeDef,
  unknown
> = z.object({
  attributes: z.lazy(() => PostProjectUserDataAttributes2$zodSchema).optional(),
  type: PostProjectUserDataType2$zodSchema,
});

export type PostProjectUserDataRequestBody2 = {
  data: PostProjectUserDataData2;
};

export const PostProjectUserDataRequestBody2$zodSchema: z.ZodType<
  PostProjectUserDataRequestBody2,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => PostProjectUserDataData2$zodSchema),
});

export type PostProjectUserDataRequest = {
  project_id: string;
  RequestBody: PostProjectUserDataRequestBody2;
};

export const PostProjectUserDataRequest$zodSchema: z.ZodType<
  PostProjectUserDataRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  RequestBody: z.lazy(() => PostProjectUserDataRequestBody2$zodSchema),
  project_id: z.string().describe("Project ID or Slug"),
});

export type PostProjectUserDataResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  user_data?: UserData | undefined;
};

export const PostProjectUserDataResponse$zodSchema: z.ZodType<
  PostProjectUserDataResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  user_data: UserData$zodSchema.optional(),
});
