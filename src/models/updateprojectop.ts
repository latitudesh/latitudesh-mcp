/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { Project, Project$zodSchema } from "./project.js";

export const UpdateProjectType2$zodSchema = z.enum([
  "projects",
]);

export type UpdateProjectType2 = z.infer<typeof UpdateProjectType2$zodSchema>;

export const UpdateProjectEnvironment2$zodSchema = z.enum([
  "Development",
  "Staging",
  "Production",
]);

export type UpdateProjectEnvironment2 = z.infer<
  typeof UpdateProjectEnvironment2$zodSchema
>;

export type UpdateProjectAttributes2 = {
  name?: string | undefined;
  description?: string | undefined;
  environment?: UpdateProjectEnvironment2 | undefined;
  bandwidth_alert?: boolean | undefined;
  tags?: Array<string> | undefined;
};

export const UpdateProjectAttributes2$zodSchema: z.ZodType<
  UpdateProjectAttributes2,
  z.ZodTypeDef,
  unknown
> = z.object({
  bandwidth_alert: z.boolean().default(false),
  description: z.string().default(
    "A brand new description for the virtual network",
  ),
  environment: UpdateProjectEnvironment2$zodSchema.optional(),
  name: z.string().default("A brand new name for the virtual network"),
  tags: z.array(z.string()).optional(),
});

export type UpdateProjectData2 = {
  id?: string | undefined;
  type: UpdateProjectType2;
  attributes?: UpdateProjectAttributes2 | undefined;
};

export const UpdateProjectData2$zodSchema: z.ZodType<
  UpdateProjectData2,
  z.ZodTypeDef,
  unknown
> = z.object({
  attributes: z.lazy(() => UpdateProjectAttributes2$zodSchema).optional(),
  id: z.string().default("proj_81EVOtR1N4J2Z"),
  type: UpdateProjectType2$zodSchema,
});

export type UpdateProjectRequestBody2 = { data: UpdateProjectData2 };

export const UpdateProjectRequestBody2$zodSchema: z.ZodType<
  UpdateProjectRequestBody2,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => UpdateProjectData2$zodSchema),
});

export type UpdateProjectRequest = {
  project_id: string;
  RequestBody?: UpdateProjectRequestBody2 | undefined;
};

export const UpdateProjectRequest$zodSchema: z.ZodType<
  UpdateProjectRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  RequestBody: z.lazy(() => UpdateProjectRequestBody2$zodSchema).optional(),
  project_id: z.string().describe("The project ID or Slug"),
});

/**
 * Success
 */
export type UpdateProjectResponseBody = { data?: Project | undefined };

export const UpdateProjectResponseBody$zodSchema: z.ZodType<
  UpdateProjectResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: Project$zodSchema.optional(),
}).describe("Success");

export type UpdateProjectResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  object?: UpdateProjectResponseBody | undefined;
};

export const UpdateProjectResponse$zodSchema: z.ZodType<
  UpdateProjectResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  object: z.lazy(() => UpdateProjectResponseBody$zodSchema).optional(),
});
