/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { TeamInclude, TeamInclude$zodSchema } from "./teaminclude.js";

export type UserRole = {
  id?: string | undefined;
  name?: string | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
};

export const UserRole$zodSchema: z.ZodType<UserRole, z.ZodTypeDef, unknown> = z
  .object({
    created_at: z.string().datetime({ offset: true }).optional(),
    id: z.string().optional(),
    name: z.string().optional(),
    updated_at: z.string().datetime({ offset: true }).optional(),
  });

export type UserAttributes = {
  first_name?: string | undefined;
  last_name?: string | undefined;
  email?: string | undefined;
  authentication_factor_id?: string | undefined;
  role?: UserRole | undefined;
  teams?: Array<TeamInclude> | undefined;
};

export const UserAttributes$zodSchema: z.ZodType<
  UserAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  authentication_factor_id: z.string().optional(),
  email: z.string().optional(),
  first_name: z.string().optional(),
  last_name: z.string().optional(),
  role: z.lazy(() => UserRole$zodSchema).optional(),
  teams: z.array(TeamInclude$zodSchema).optional(),
});

export type User = {
  id?: string | undefined;
  attributes?: UserAttributes | undefined;
};

export const User$zodSchema: z.ZodType<User, z.ZodTypeDef, unknown> = z.object({
  attributes: z.lazy(() => UserAttributes$zodSchema).optional(),
  id: z.string().optional(),
});
