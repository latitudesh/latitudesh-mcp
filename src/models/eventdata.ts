/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export const EventDataType$zodSchema = z.enum([
  "events",
]);

export type EventDataType = z.infer<typeof EventDataType$zodSchema>;

export type Author = {
  id?: string | undefined;
  name?: string | undefined;
  email?: string | undefined;
};

export const Author$zodSchema: z.ZodType<Author, z.ZodTypeDef, unknown> = z
  .object({
    email: z.string().optional(),
    id: z.string().optional(),
    name: z.string().optional(),
  });

export type EventDataProject = {
  id?: string | undefined;
  name?: string | undefined;
  slug?: string | undefined;
};

export const EventDataProject$zodSchema: z.ZodType<
  EventDataProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  slug: z.string().optional(),
});

export type EventDataTeam = {
  id?: string | undefined;
  name?: string | undefined;
};

export const EventDataTeam$zodSchema: z.ZodType<
  EventDataTeam,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
});

export type Target = { id?: string | undefined; name?: string | undefined };

export const Target$zodSchema: z.ZodType<Target, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    name: z.string().optional(),
  });

export type EventDataAttributes = {
  action?: string | undefined;
  created_at?: string | undefined;
  author?: Author | undefined;
  project?: EventDataProject | undefined;
  team?: EventDataTeam | undefined;
  target?: Target | undefined;
};

export const EventDataAttributes$zodSchema: z.ZodType<
  EventDataAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  action: z.string().optional(),
  author: z.lazy(() => Author$zodSchema).optional(),
  created_at: z.string().optional(),
  project: z.lazy(() => EventDataProject$zodSchema).optional(),
  target: z.lazy(() => Target$zodSchema).optional(),
  team: z.lazy(() => EventDataTeam$zodSchema).optional(),
});

export type EventData = {
  id?: string | undefined;
  type?: EventDataType | undefined;
  attributes?: EventDataAttributes | undefined;
};

export const EventData$zodSchema: z.ZodType<EventData, z.ZodTypeDef, unknown> =
  z.object({
    attributes: z.lazy(() => EventDataAttributes$zodSchema).optional(),
    id: z.string().optional(),
    type: EventDataType$zodSchema.optional(),
  });
