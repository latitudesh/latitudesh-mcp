/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { Project, Project$zodSchema } from "./project.js";

export const CreateProjectType2$zodSchema = z.enum([
  "projects",
]);

export type CreateProjectType2 = z.infer<typeof CreateProjectType2$zodSchema>;

/**
 * The provisioning type of the project. Default: on_demand
 */
export const ProvisioningType2$zodSchema = z.enum([
  "reserved",
  "on_demand",
]).describe("The provisioning type of the project. Default: on_demand");

export type ProvisioningType2 = z.infer<typeof ProvisioningType2$zodSchema>;

export const CreateProjectEnvironment2$zodSchema = z.enum([
  "Development",
  "Staging",
  "Production",
]);

export type CreateProjectEnvironment2 = z.infer<
  typeof CreateProjectEnvironment2$zodSchema
>;

export type CreateProjectAttributes2 = {
  name: string;
  provisioning_type: ProvisioningType2;
  description?: string | undefined;
  environment?: CreateProjectEnvironment2 | undefined;
};

export const CreateProjectAttributes2$zodSchema: z.ZodType<
  CreateProjectAttributes2,
  z.ZodTypeDef,
  unknown
> = z.object({
  description: z.string().optional(),
  environment: CreateProjectEnvironment2$zodSchema.optional(),
  name: z.string(),
  provisioning_type: ProvisioningType2$zodSchema,
});

export type CreateProjectData2 = {
  type: CreateProjectType2;
  attributes?: CreateProjectAttributes2 | undefined;
};

export const CreateProjectData2$zodSchema: z.ZodType<
  CreateProjectData2,
  z.ZodTypeDef,
  unknown
> = z.object({
  attributes: z.lazy(() => CreateProjectAttributes2$zodSchema).optional(),
  type: CreateProjectType2$zodSchema,
});

export type CreateProjectRequest = { data?: CreateProjectData2 | undefined };

export const CreateProjectRequest$zodSchema: z.ZodType<
  CreateProjectRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => CreateProjectData2$zodSchema).optional(),
});

/**
 * Created
 */
export type CreateProjectResponseBody = { data?: Project | undefined };

export const CreateProjectResponseBody$zodSchema: z.ZodType<
  CreateProjectResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: Project$zodSchema.optional(),
}).describe("Created");

export type CreateProjectResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  object?: CreateProjectResponseBody | undefined;
};

export const CreateProjectResponse$zodSchema: z.ZodType<
  CreateProjectResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  object: z.lazy(() => CreateProjectResponseBody$zodSchema).optional(),
});
