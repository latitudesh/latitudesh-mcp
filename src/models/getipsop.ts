/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { IpAddresses, IpAddresses$zodSchema } from "./ipaddresses.js";

/**
 * The protocol family to filter by
 */
export const FilterFamily$zodSchema = z.enum([
  "IPv4",
  "IPv6",
]).describe("The protocol family to filter by");

export type FilterFamily = z.infer<typeof FilterFamily$zodSchema>;

/**
 * The protocol type to filter by
 */
export const FilterType$zodSchema = z.enum([
  "private",
  "public",
]).describe("The protocol type to filter by");

export type FilterType = z.infer<typeof FilterType$zodSchema>;

export type GetIpsRequest = {
  filterServer?: string | undefined;
  filterProject?: string | undefined;
  filterFamily?: FilterFamily | undefined;
  filterType?: FilterType | undefined;
  filterLocation?: string | undefined;
  filterAddress?: string | undefined;
  extraFieldsIpAddresses?: string | undefined;
  pageSize?: number | undefined;
  pageNumber?: number | undefined;
};

export const GetIpsRequest$zodSchema: z.ZodType<
  GetIpsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  extraFieldsIpAddresses: z.string().describe(
    "The `region` and `server` are provided as extra attributes that are lazy loaded. To request it, just set `extra_fields[ip_addresses]=region,server` in the query string.",
  ).optional(),
  filterAddress: z.string().describe(
    "The address of IP to filter by starts_with",
  ).optional(),
  filterFamily: FilterFamily$zodSchema.optional(),
  filterLocation: z.string().describe("The site slug to filter by").optional(),
  filterProject: z.string().describe("The project ID or Slug to filter by")
    .optional(),
  filterServer: z.string().describe("The server ID to filter by").optional(),
  filterType: FilterType$zodSchema.optional(),
  pageNumber: z.number().int().default(1).describe(
    "Page number to return (starts at 1)",
  ),
  pageSize: z.number().int().default(20).describe(
    "Number of items to return per page",
  ),
});

export type GetIpsResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  ip_addresses?: IpAddresses | undefined;
};

export const GetIpsResponse$zodSchema: z.ZodType<
  GetIpsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  ip_addresses: IpAddresses$zodSchema.optional(),
});
