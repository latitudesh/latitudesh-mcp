/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export const ContainerPlanDataType$zodSchema = z.enum([
  "container_plan",
]);

export type ContainerPlanDataType = z.infer<
  typeof ContainerPlanDataType$zodSchema
>;

export type ContainerPlanDataCpu = {
  cores?: number | undefined;
  count?: number | undefined;
};

export const ContainerPlanDataCpu$zodSchema: z.ZodType<
  ContainerPlanDataCpu,
  z.ZodTypeDef,
  unknown
> = z.object({
  cores: z.number().optional(),
  count: z.number().optional(),
});

export type ContainerPlanDataMemory = { total?: number | undefined };

export const ContainerPlanDataMemory$zodSchema: z.ZodType<
  ContainerPlanDataMemory,
  z.ZodTypeDef,
  unknown
> = z.object({
  total: z.number().optional(),
});

export type EphemeralStorage = { size?: number | undefined };

export const EphemeralStorage$zodSchema: z.ZodType<
  EphemeralStorage,
  z.ZodTypeDef,
  unknown
> = z.object({
  size: z.number().optional(),
});

export type ContainerPlanDataGpu = {
  count?: number | undefined;
  type?: string | undefined;
};

export const ContainerPlanDataGpu$zodSchema: z.ZodType<
  ContainerPlanDataGpu,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().optional(),
  type: z.string().optional(),
});

export type ContainerPlanDataSpecs = {
  cpu?: ContainerPlanDataCpu | undefined;
  memory?: ContainerPlanDataMemory | undefined;
  ephemeral_storage?: EphemeralStorage | undefined;
  gpu?: ContainerPlanDataGpu | undefined;
};

export const ContainerPlanDataSpecs$zodSchema: z.ZodType<
  ContainerPlanDataSpecs,
  z.ZodTypeDef,
  unknown
> = z.object({
  cpu: z.lazy(() => ContainerPlanDataCpu$zodSchema).optional(),
  ephemeral_storage: z.lazy(() => EphemeralStorage$zodSchema).optional(),
  gpu: z.lazy(() => ContainerPlanDataGpu$zodSchema).optional(),
  memory: z.lazy(() => ContainerPlanDataMemory$zodSchema).optional(),
});

export type ContainerPlanDataLocations = {
  available?: Array<string> | undefined;
  in_stock?: Array<string> | undefined;
};

export const ContainerPlanDataLocations$zodSchema: z.ZodType<
  ContainerPlanDataLocations,
  z.ZodTypeDef,
  unknown
> = z.object({
  available: z.array(z.string()).optional(),
  in_stock: z.array(z.string()).optional(),
});

export const ContainerPlanDataStockLevel$zodSchema = z.enum([
  "unavailable",
  "low",
  "medium",
  "high",
]);

export type ContainerPlanDataStockLevel = z.infer<
  typeof ContainerPlanDataStockLevel$zodSchema
>;

export type ContainerPlanDataUSD = {
  minute?: number | undefined;
  hour?: number | undefined;
};

export const ContainerPlanDataUSD$zodSchema: z.ZodType<
  ContainerPlanDataUSD,
  z.ZodTypeDef,
  unknown
> = z.object({
  hour: z.number().optional(),
  minute: z.number().optional(),
});

export type ContainerPlanDataBRL = {
  minute?: number | undefined;
  hour?: number | undefined;
};

export const ContainerPlanDataBRL$zodSchema: z.ZodType<
  ContainerPlanDataBRL,
  z.ZodTypeDef,
  unknown
> = z.object({
  hour: z.number().optional(),
  minute: z.number().optional(),
});

export type ContainerPlanDataPricing = {
  USD?: ContainerPlanDataUSD | undefined;
  BRL?: ContainerPlanDataBRL | undefined;
};

export const ContainerPlanDataPricing$zodSchema: z.ZodType<
  ContainerPlanDataPricing,
  z.ZodTypeDef,
  unknown
> = z.object({
  BRL: z.lazy(() => ContainerPlanDataBRL$zodSchema).optional(),
  USD: z.lazy(() => ContainerPlanDataUSD$zodSchema).optional(),
});

export type ContainerPlanDataRegion = {
  name?: string | undefined;
  locations?: ContainerPlanDataLocations | undefined;
  stock_level?: ContainerPlanDataStockLevel | undefined;
  pricing?: ContainerPlanDataPricing | undefined;
};

export const ContainerPlanDataRegion$zodSchema: z.ZodType<
  ContainerPlanDataRegion,
  z.ZodTypeDef,
  unknown
> = z.object({
  locations: z.lazy(() => ContainerPlanDataLocations$zodSchema).optional(),
  name: z.string().optional(),
  pricing: z.lazy(() => ContainerPlanDataPricing$zodSchema).optional(),
  stock_level: ContainerPlanDataStockLevel$zodSchema.optional(),
});

export type ContainerPlanDataAttributes = {
  slug?: string | undefined;
  specs?: ContainerPlanDataSpecs | undefined;
  regions?: Array<ContainerPlanDataRegion> | undefined;
};

export const ContainerPlanDataAttributes$zodSchema: z.ZodType<
  ContainerPlanDataAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  regions: z.array(z.lazy(() => ContainerPlanDataRegion$zodSchema)).optional(),
  slug: z.string().optional(),
  specs: z.lazy(() => ContainerPlanDataSpecs$zodSchema).optional(),
});

export type ContainerPlanData = {
  id?: string | undefined;
  type?: ContainerPlanDataType | undefined;
  attributes?: ContainerPlanDataAttributes | undefined;
};

export const ContainerPlanData$zodSchema: z.ZodType<
  ContainerPlanData,
  z.ZodTypeDef,
  unknown
> = z.object({
  attributes: z.lazy(() => ContainerPlanDataAttributes$zodSchema).optional(),
  id: z.string().optional(),
  type: ContainerPlanDataType$zodSchema.optional(),
});
