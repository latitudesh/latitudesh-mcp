/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export const Family$zodSchema = z.enum([
  "IPv4",
  "IPv6",
]);

export type Family = z.infer<typeof Family$zodSchema>;

export const IpAddressType$zodSchema = z.enum([
  "Public",
  "Private",
]);

export type IpAddressType = z.infer<typeof IpAddressType$zodSchema>;

export type IpAddressProject = {
  id?: string | undefined;
  name?: string | undefined;
};

export const IpAddressProject$zodSchema: z.ZodType<
  IpAddressProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
});

export type Location = {
  id?: string | undefined;
  name?: string | undefined;
  slug?: string | undefined;
};

export const Location$zodSchema: z.ZodType<Location, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string().optional(),
    name: z.string().optional(),
    slug: z.string().optional(),
  });

export type IpAddressRegion = {
  id?: string | undefined;
  name?: string | undefined;
  location?: Location | undefined;
};

export const IpAddressRegion$zodSchema: z.ZodType<
  IpAddressRegion,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  location: z.lazy(() => Location$zodSchema).optional(),
  name: z.string().optional(),
});

export type Assignment = {
  server_id?: string | undefined;
  hostname?: string | undefined;
  assigned_at?: string | undefined;
};

export const Assignment$zodSchema: z.ZodType<
  Assignment,
  z.ZodTypeDef,
  unknown
> = z.object({
  assigned_at: z.string().optional(),
  hostname: z.string().optional(),
  server_id: z.string().optional(),
});

export type IpAddressAttributes = {
  address?: string | undefined;
  cidr?: string | undefined;
  family?: Family | undefined;
  gateway?: string | undefined;
  netmask?: string | undefined;
  type?: IpAddressType | undefined;
  public?: boolean | undefined;
  management?: boolean | undefined;
  project?: IpAddressProject | undefined;
  region?: IpAddressRegion | undefined;
  available?: boolean | undefined;
  assignment?: Assignment | undefined;
};

export const IpAddressAttributes$zodSchema: z.ZodType<
  IpAddressAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  address: z.string().optional(),
  assignment: z.lazy(() => Assignment$zodSchema).optional(),
  available: z.boolean().optional(),
  cidr: z.string().optional(),
  family: Family$zodSchema.optional(),
  gateway: z.string().optional(),
  management: z.boolean().optional(),
  netmask: z.string().optional(),
  project: z.lazy(() => IpAddressProject$zodSchema).optional(),
  public: z.boolean().optional(),
  region: z.lazy(() => IpAddressRegion$zodSchema).optional(),
  type: IpAddressType$zodSchema.optional(),
});

export type IpAddress = {
  id?: string | undefined;
  attributes?: IpAddressAttributes | undefined;
};

export const IpAddress$zodSchema: z.ZodType<IpAddress, z.ZodTypeDef, unknown> =
  z.object({
    attributes: z.lazy(() => IpAddressAttributes$zodSchema).optional(),
    id: z.string().optional(),
  });
