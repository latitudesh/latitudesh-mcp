/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  VpnSessionDataWithPassword,
  VpnSessionDataWithPassword$zodSchema,
} from "./vpnsessiondatawithpassword.js";

export const FilterLocation$zodSchema = z.enum([
  "ASH",
  "BGT",
  "BUE",
  "CHI",
  "DAL",
  "FRA",
  "LAX",
  "LON",
  "MEX",
  "MEX2",
  "MIA",
  "MIA2",
  "NYC",
  "SAN",
  "SAO",
  "SAO2",
  "SYD",
  "TYO",
  "TYO2",
]);

export type FilterLocation = z.infer<typeof FilterLocation$zodSchema>;

export type GetVpnSessionsRequest = {
  filterLocation?: FilterLocation | undefined;
};

export const GetVpnSessionsRequest$zodSchema: z.ZodType<
  GetVpnSessionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  filterLocation: FilterLocation$zodSchema.optional(),
});

export type GetVpnSessionsMeta = {};

export const GetVpnSessionsMeta$zodSchema: z.ZodType<
  GetVpnSessionsMeta,
  z.ZodTypeDef,
  unknown
> = z.object({});

/**
 * Success
 */
export type GetVpnSessionsResponseBody = {
  data?: Array<VpnSessionDataWithPassword> | undefined;
  meta?: GetVpnSessionsMeta | undefined;
};

export const GetVpnSessionsResponseBody$zodSchema: z.ZodType<
  GetVpnSessionsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(VpnSessionDataWithPassword$zodSchema).optional(),
  meta: z.lazy(() => GetVpnSessionsMeta$zodSchema).optional(),
}).describe("Success");

export type GetVpnSessionsResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  object?: GetVpnSessionsResponseBody | undefined;
};

export const GetVpnSessionsResponse$zodSchema: z.ZodType<
  GetVpnSessionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  object: z.lazy(() => GetVpnSessionsResponseBody$zodSchema).optional(),
});
