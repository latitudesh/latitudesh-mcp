/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { Server, Server$zodSchema } from "./server.js";

export const CreateServerType2$zodSchema = z.enum([
  "servers",
]);

export type CreateServerType2 = z.infer<typeof CreateServerType2$zodSchema>;

/**
 * The plan slug to choose server from, defining the specs the server will have
 */
export const CreateServerPlan2$zodSchema = z.enum([
  "c2-large-x86",
  "c2-medium-x86",
  "c2-small-x86",
  "c3-large-x86",
  "c3-medium-x86",
  "c3-small-x86",
  "c3-xlarge-x86",
  "g3-large-x86",
  "g3-medium-x86",
  "g3-small-x86",
  "g3-xlarge-x86",
  "m3-large-x86",
  "s2-small-x86",
  "s3-large-x86",
]).describe(
  "The plan slug to choose server from, defining the specs the server will have",
);

export type CreateServerPlan2 = z.infer<typeof CreateServerPlan2$zodSchema>;

/**
 * The site slug to deploy the server
 */
export const CreateServerSite2$zodSchema = z.enum([
  "ASH",
  "BGT",
  "BUE",
  "CHI",
  "DAL",
  "FRA",
  "LAX",
  "LON",
  "MEX",
  "MEX2",
  "MIA",
  "MIA2",
  "NYC",
  "SAN",
  "SAO",
  "SAO2",
  "SYD",
  "TYO",
  "TYO2",
]).describe("The site slug to deploy the server");

export type CreateServerSite2 = z.infer<typeof CreateServerSite2$zodSchema>;

/**
 * The operating system slug for the new server
 */
export const CreateServerOperatingSystem2$zodSchema = z.enum([
  "ipxe",
  "windows_server_2019_std_v1",
  "ubuntu_22_04_x64_lts",
  "debian_11",
  "debian_10",
  "rhel8",
  "windows_server_2012_r2_std_v28",
  "windows_server_2012_r2_dc_v5",
  "esxi_6_7",
  "debian_9_4_x64",
  "centos_7_4_x64",
  "centos_8_x64",
  "ubuntu_16_04_x64_lts",
  "ubuntu_20_04_x64_lts",
  "windows_server_2016_std_v1",
  "windows_server_2016_dc_v1",
  "windows_server_2019_dc_v1",
  "debian_12",
  "ubuntu22_ml_in_a_box",
  "ubuntu_18_04_x64_lts",
  "windows_server_2019_std_uefi",
  "windows_2022_std_uefi",
  "windows_2022_std",
  "ubuntu_24_04_x64_lts",
  "rockylinux_8",
]).describe("The operating system slug for the new server");

export type CreateServerOperatingSystem2 = z.infer<
  typeof CreateServerOperatingSystem2$zodSchema
>;

/**
 * RAID mode for the server
 */
export const CreateServerRaid2$zodSchema = z.enum([
  "raid-0",
  "raid-1",
]).describe("RAID mode for the server");

export type CreateServerRaid2 = z.infer<typeof CreateServerRaid2$zodSchema>;

/**
 * The server billing type. Accepts `hourly` and `monthly` for on demand projects and `yearly` for reserved projects.
 */
export const CreateServerBilling2$zodSchema = z.enum([
  "hourly",
  "monthly",
  "yearly",
]).describe(
  "The server billing type. Accepts `hourly` and `monthly` for on demand projects and `yearly` for reserved projects.",
);

export type CreateServerBilling2 = z.infer<
  typeof CreateServerBilling2$zodSchema
>;

export type CreateServerAttributes2 = {
  project?: string | undefined;
  plan?: CreateServerPlan2 | undefined;
  site?: CreateServerSite2 | undefined;
  operating_system?: CreateServerOperatingSystem2 | undefined;
  hostname?: string | undefined;
  ssh_keys?: Array<string> | undefined;
  user_data?: string | undefined;
  raid?: CreateServerRaid2 | undefined;
  ipxe?: string | undefined;
  billing?: CreateServerBilling2 | undefined;
};

export const CreateServerAttributes2$zodSchema: z.ZodType<
  CreateServerAttributes2,
  z.ZodTypeDef,
  unknown
> = z.object({
  billing: CreateServerBilling2$zodSchema.optional(),
  hostname: z.string().optional(),
  ipxe: z.string().optional(),
  operating_system: CreateServerOperatingSystem2$zodSchema.optional(),
  plan: CreateServerPlan2$zodSchema.optional(),
  project: z.string().optional(),
  raid: CreateServerRaid2$zodSchema.optional(),
  site: CreateServerSite2$zodSchema.optional(),
  ssh_keys: z.array(z.string()).optional(),
  user_data: z.string().optional(),
});

export type CreateServerData2 = {
  type: CreateServerType2;
  attributes?: CreateServerAttributes2 | undefined;
};

export const CreateServerData2$zodSchema: z.ZodType<
  CreateServerData2,
  z.ZodTypeDef,
  unknown
> = z.object({
  attributes: z.lazy(() => CreateServerAttributes2$zodSchema).optional(),
  type: CreateServerType2$zodSchema,
});

export type CreateServerRequest = { data?: CreateServerData2 | undefined };

export const CreateServerRequest$zodSchema: z.ZodType<
  CreateServerRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => CreateServerData2$zodSchema).optional(),
});

export type CreateServerResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  server?: Server | undefined;
};

export const CreateServerResponse$zodSchema: z.ZodType<
  CreateServerResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  server: Server$zodSchema.optional(),
});
