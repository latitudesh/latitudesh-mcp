/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { PlanData, PlanData$zodSchema } from "./plandata.js";

/**
 * The stock level at the site to filter by
 */
export const FilterStockLevel$zodSchema = z.enum([
  "unavailable",
  "low",
  "medium",
  "high",
  "unique",
]).describe("The stock level at the site to filter by");

export type FilterStockLevel = z.infer<typeof FilterStockLevel$zodSchema>;

export type GetPlansRequest = {
  filterName?: string | undefined;
  filterSlug?: string | undefined;
  filterLocation?: string | undefined;
  filterStockLevel?: FilterStockLevel | undefined;
  filterInStock?: boolean | undefined;
  filterGpu?: boolean | undefined;
  filterRam?: number | undefined;
  filterDisk?: number | undefined;
};

export const GetPlansRequest$zodSchema: z.ZodType<
  GetPlansRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  filterDisk: z.number().int().describe(
    "The disk size in Gigabytes to filter by, should be used with the following options:\n"
      + "                              [eql] to filter for values equal to the provided value.\n"
      + "                              [gte] to filter for values greater or equal to the provided value.\n"
      + "                              [lte] to filter by values lower or equal to the provided value.",
  ).optional(),
  filterGpu: z.boolean().describe(
    "Filter by the existence of an associated GPU",
  ).optional(),
  filterInStock: z.boolean().describe(
    "The stock available at the site to filter by",
  ).optional(),
  filterLocation: z.string().describe("The location of the site to filter by")
    .optional(),
  filterName: z.string().describe("The plan name to filter by").optional(),
  filterRam: z.number().int().describe(
    "The ram size in Gigabytes to filter by, should be used with the following options:\n"
      + "                              [eql] to filter for values equal to the provided value.\n"
      + "                              [gte] to filter for values greater or equal to the provided value.\n"
      + "                              [lte] to filter by values lower or equal to the provided value.",
  ).optional(),
  filterSlug: z.string().describe("The plan slug to filter by").optional(),
  filterStockLevel: FilterStockLevel$zodSchema.optional(),
});

/**
 * Success
 */
export type GetPlansResponseBody = { data?: Array<PlanData> | undefined };

export const GetPlansResponseBody$zodSchema: z.ZodType<
  GetPlansResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(PlanData$zodSchema).optional(),
}).describe("Success");

export type GetPlansResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  object?: GetPlansResponseBody | undefined;
};

export const GetPlansResponse$zodSchema: z.ZodType<
  GetPlansResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  object: z.lazy(() => GetPlansResponseBody$zodSchema).optional(),
});
