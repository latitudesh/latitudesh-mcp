/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  VirtualNetworks,
  VirtualNetworks$zodSchema,
} from "./virtualnetworks.js";

export type GetVirtualNetworksRequest = {
  filterLocation?: string | undefined;
  filterProject?: string | undefined;
  filterTags?: string | undefined;
  pageSize?: number | undefined;
  pageNumber?: number | undefined;
};

export const GetVirtualNetworksRequest$zodSchema: z.ZodType<
  GetVirtualNetworksRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  filterLocation: z.string().describe("The location slug to filter by")
    .optional(),
  filterProject: z.string().describe("The project id or slug to filter by")
    .optional(),
  filterTags: z.string().describe(
    "The tags ids to filter by, separated by comma, e.g. `filter[tags]=tag_1,tag_2`will return ssh keys with `tag_1` AND `tag_2`",
  ).optional(),
  pageNumber: z.number().int().default(1).describe(
    "Page number to return (starts at 1)",
  ),
  pageSize: z.number().int().default(20).describe(
    "Number of items to return per page",
  ),
});

export type GetVirtualNetworksResponse = {
  ContentType: string;
  StatusCode: number;
  RawResponse: Response;
  virtual_networks?: VirtualNetworks | undefined;
};

export const GetVirtualNetworksResponse$zodSchema: z.ZodType<
  GetVirtualNetworksResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  ContentType: z.string(),
  RawResponse: z.instanceof(Response),
  StatusCode: z.number().int(),
  virtual_networks: VirtualNetworks$zodSchema.optional(),
});
