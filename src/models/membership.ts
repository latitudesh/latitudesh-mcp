/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export const MembershipRole$zodSchema = z.enum([
  "owner",
  "administrator",
  "collaborator",
  "billing",
]);

export type MembershipRole = z.infer<typeof MembershipRole$zodSchema>;

export type MembershipAttributes = {
  first_name?: string | undefined;
  last_name?: string | undefined;
  email?: string | undefined;
  role?: MembershipRole | undefined;
  mfa_enabled?: boolean | undefined;
  created_at?: string | undefined;
  updated_at?: string | undefined;
  last_login_at?: string | undefined;
};

export const MembershipAttributes$zodSchema: z.ZodType<
  MembershipAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  created_at: z.string().datetime({ offset: true }).optional(),
  email: z.string().optional(),
  first_name: z.string().optional(),
  last_login_at: z.string().datetime({ offset: true }).optional(),
  last_name: z.string().optional(),
  mfa_enabled: z.boolean().optional(),
  role: MembershipRole$zodSchema.optional(),
  updated_at: z.string().datetime({ offset: true }).optional(),
});

export type MembershipData = {
  id?: string | undefined;
  attributes?: MembershipAttributes | undefined;
};

export const MembershipData$zodSchema: z.ZodType<
  MembershipData,
  z.ZodTypeDef,
  unknown
> = z.object({
  attributes: z.lazy(() => MembershipAttributes$zodSchema).optional(),
  id: z.string().optional(),
});

export type Membership = { data?: MembershipData | undefined };

export const Membership$zodSchema: z.ZodType<
  Membership,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => MembershipData$zodSchema).optional(),
});
