/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * The project in which the returned usage belongs to
 */
export type BillingUsageProject = {
  id?: string | undefined;
  slug?: string | undefined;
  name?: string | undefined;
};

export const BillingUsageProject$zodSchema: z.ZodType<
  BillingUsageProject,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  slug: z.string().optional(),
}).describe("The project in which the returned usage belongs to");

/**
 * The period from the returned billing cycle
 */
export type Period = { start?: string | undefined; end?: string | undefined };

export const Period$zodSchema: z.ZodType<Period, z.ZodTypeDef, unknown> = z
  .object({
    end: z.string().datetime({ offset: true }).optional(),
    start: z.string().datetime({ offset: true }).optional(),
  }).describe("The period from the returned billing cycle");

/**
 * Type of discount (percentage or fixed amount)
 */
export const BillingUsageType$zodSchema = z.enum([
  "percent",
  "amount",
]).describe("Type of discount (percentage or fixed amount)");

export type BillingUsageType = z.infer<typeof BillingUsageType$zodSchema>;

export type Discount = {
  description: string;
  type: BillingUsageType;
  value: number;
};

export const Discount$zodSchema: z.ZodType<Discount, z.ZodTypeDef, unknown> = z
  .object({
    description: z.string(),
    type: BillingUsageType$zodSchema,
    value: z.number(),
  });

export const BillingUsageUnit$zodSchema = z.enum([
  "quantity",
  "hour",
  "minute",
]);

export type BillingUsageUnit = z.infer<typeof BillingUsageUnit$zodSchema>;

export const UsageType$zodSchema = z.enum([
  "licensed",
  "metered",
]);

export type UsageType = z.infer<typeof UsageType$zodSchema>;

export type Metadata = {
  id?: string | undefined;
  hostname?: string | undefined;
  plan?: string | undefined;
  tags?: Array<string> | undefined;
};

export const Metadata$zodSchema: z.ZodType<Metadata, z.ZodTypeDef, unknown> = z
  .object({
    hostname: z.string().optional(),
    id: z.string().optional(),
    plan: z.string().optional(),
    tags: z.array(z.string()).optional(),
  });

export type Product = {
  id?: string | undefined;
  resource?: string | undefined;
  name?: string | undefined;
  proration?: boolean | undefined;
  discounts?: Array<Discount> | undefined;
  discountable?: boolean | undefined;
  description?: string | undefined;
  amount_without_discount?: number | undefined;
  start?: string | undefined;
  end?: string | undefined;
  unit?: BillingUsageUnit | undefined;
  unit_price?: number | undefined;
  usage_type?: UsageType | undefined;
  quantity?: number | undefined;
  price?: number | undefined;
  metadata?: Metadata | undefined;
};

export const Product$zodSchema: z.ZodType<Product, z.ZodTypeDef, unknown> = z
  .object({
    amount_without_discount: z.number().int().optional(),
    description: z.string().optional(),
    discountable: z.boolean().optional(),
    discounts: z.array(z.lazy(() => Discount$zodSchema)).optional(),
    end: z.string().datetime({ offset: true }).optional(),
    id: z.string().optional(),
    metadata: z.lazy(() => Metadata$zodSchema).optional(),
    name: z.string().optional(),
    price: z.number().optional(),
    proration: z.boolean().optional(),
    quantity: z.number().optional(),
    resource: z.string().optional(),
    start: z.string().datetime({ offset: true }).optional(),
    unit: BillingUsageUnit$zodSchema.optional(),
    unit_price: z.number().optional(),
    usage_type: UsageType$zodSchema.optional(),
  });

export type BillingUsageAttributes = {
  project?: BillingUsageProject | undefined;
  period?: Period | undefined;
  price?: number | undefined;
  threshold?: number | undefined;
  products?: Array<Product> | undefined;
};

export const BillingUsageAttributes$zodSchema: z.ZodType<
  BillingUsageAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  period: z.lazy(() => Period$zodSchema).optional(),
  price: z.number().optional(),
  products: z.array(z.lazy(() => Product$zodSchema)).optional(),
  project: z.lazy(() => BillingUsageProject$zodSchema).optional(),
  threshold: z.number().optional(),
});

export type BillingUsageData = {
  id?: string | undefined;
  attributes?: BillingUsageAttributes | undefined;
};

export const BillingUsageData$zodSchema: z.ZodType<
  BillingUsageData,
  z.ZodTypeDef,
  unknown
> = z.object({
  attributes: z.lazy(() => BillingUsageAttributes$zodSchema).optional(),
  id: z.string().optional(),
});

export type BillingUsage = { data?: BillingUsageData | undefined };

export const BillingUsage$zodSchema: z.ZodType<
  BillingUsage,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => BillingUsageData$zodSchema).optional(),
});
