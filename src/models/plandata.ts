/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";

export const PlanDataTypePlans$zodSchema = z.enum([
  "plans",
]);

export type PlanDataTypePlans = z.infer<typeof PlanDataTypePlans$zodSchema>;

export type PlanDataCpu = {
  type?: string | undefined;
  clock?: number | undefined;
  cores?: number | undefined;
  count?: number | undefined;
};

export const PlanDataCpu$zodSchema: z.ZodType<
  PlanDataCpu,
  z.ZodTypeDef,
  unknown
> = z.object({
  clock: z.number().optional(),
  cores: z.number().optional(),
  count: z.number().optional(),
  type: z.string().optional(),
});

export type PlanDataMemory = { total?: number | undefined };

export const PlanDataMemory$zodSchema: z.ZodType<
  PlanDataMemory,
  z.ZodTypeDef,
  unknown
> = z.object({
  total: z.number().optional(),
});

export const DriveType$zodSchema = z.enum([
  "SSD",
  "HDD",
  "NVME",
]);

export type DriveType = z.infer<typeof DriveType$zodSchema>;

export type Drive = {
  count?: number | undefined;
  size?: string | undefined;
  type?: DriveType | undefined;
};

export const Drive$zodSchema: z.ZodType<Drive, z.ZodTypeDef, unknown> = z
  .object({
    count: z.number().optional(),
    size: z.string().optional(),
    type: DriveType$zodSchema.optional(),
  });

export type Nic = { count?: number | undefined; type?: string | undefined };

export const Nic$zodSchema: z.ZodType<Nic, z.ZodTypeDef, unknown> = z.object({
  count: z.number().optional(),
  type: z.string().optional(),
});

export type PlanDataGpu = {
  count?: number | undefined;
  type?: string | undefined;
};

export const PlanDataGpu$zodSchema: z.ZodType<
  PlanDataGpu,
  z.ZodTypeDef,
  unknown
> = z.object({
  count: z.number().optional(),
  type: z.string().optional(),
});

export type PlanDataSpecs = {
  cpu?: PlanDataCpu | undefined;
  memory?: PlanDataMemory | undefined;
  drives?: Array<Drive> | undefined;
  nics?: Array<Nic> | undefined;
  gpu?: PlanDataGpu | undefined;
};

export const PlanDataSpecs$zodSchema: z.ZodType<
  PlanDataSpecs,
  z.ZodTypeDef,
  unknown
> = z.object({
  cpu: z.lazy(() => PlanDataCpu$zodSchema).optional(),
  drives: z.array(z.lazy(() => Drive$zodSchema)).optional(),
  gpu: z.lazy(() => PlanDataGpu$zodSchema).optional(),
  memory: z.lazy(() => PlanDataMemory$zodSchema).optional(),
  nics: z.array(z.lazy(() => Nic$zodSchema)).optional(),
});

export type PlanDataLocations = {
  available?: Array<string> | undefined;
  in_stock?: Array<string> | undefined;
};

export const PlanDataLocations$zodSchema: z.ZodType<
  PlanDataLocations,
  z.ZodTypeDef,
  unknown
> = z.object({
  available: z.array(z.string()).optional(),
  in_stock: z.array(z.string()).optional(),
});

export const PlanDataStockLevel$zodSchema = z.enum([
  "unavailable",
  "low",
  "medium",
  "high",
]);

export type PlanDataStockLevel = z.infer<typeof PlanDataStockLevel$zodSchema>;

export type PlanDataUSD = {
  hour?: number | undefined;
  month?: number | undefined;
  year?: number | undefined;
};

export const PlanDataUSD$zodSchema: z.ZodType<
  PlanDataUSD,
  z.ZodTypeDef,
  unknown
> = z.object({
  hour: z.number().optional(),
  month: z.number().optional(),
  year: z.number().optional(),
});

export type PlanDataBRL = {
  hour?: number | undefined;
  month?: number | undefined;
  year?: number | undefined;
};

export const PlanDataBRL$zodSchema: z.ZodType<
  PlanDataBRL,
  z.ZodTypeDef,
  unknown
> = z.object({
  hour: z.number().optional(),
  month: z.number().optional(),
  year: z.number().optional(),
});

export type PlanDataPricing = {
  USD?: PlanDataUSD | undefined;
  BRL?: PlanDataBRL | undefined;
};

export const PlanDataPricing$zodSchema: z.ZodType<
  PlanDataPricing,
  z.ZodTypeDef,
  unknown
> = z.object({
  BRL: z.lazy(() => PlanDataBRL$zodSchema).optional(),
  USD: z.lazy(() => PlanDataUSD$zodSchema).optional(),
});

export type PlanDataRegion = {
  name?: string | undefined;
  deploys_instantly?: Array<string> | undefined;
  locations?: PlanDataLocations | undefined;
  stock_level?: PlanDataStockLevel | undefined;
  pricing?: PlanDataPricing | undefined;
};

export const PlanDataRegion$zodSchema: z.ZodType<
  PlanDataRegion,
  z.ZodTypeDef,
  unknown
> = z.object({
  deploys_instantly: z.array(z.string()).optional(),
  locations: z.lazy(() => PlanDataLocations$zodSchema).optional(),
  name: z.string().optional(),
  pricing: z.lazy(() => PlanDataPricing$zodSchema).optional(),
  stock_level: PlanDataStockLevel$zodSchema.optional(),
});

export type PlanDataAttributes = {
  slug?: string | undefined;
  name?: string | undefined;
  features?: Array<string> | undefined;
  specs?: PlanDataSpecs | undefined;
  regions?: Array<PlanDataRegion> | undefined;
};

export const PlanDataAttributes$zodSchema: z.ZodType<
  PlanDataAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  features: z.array(z.string()).optional(),
  name: z.string().optional(),
  regions: z.array(z.lazy(() => PlanDataRegion$zodSchema)).optional(),
  slug: z.string().optional(),
  specs: z.lazy(() => PlanDataSpecs$zodSchema).optional(),
});

export type PlanData = {
  id?: string | undefined;
  type?: PlanDataTypePlans | undefined;
  attributes?: PlanDataAttributes | undefined;
};

export const PlanData$zodSchema: z.ZodType<PlanData, z.ZodTypeDef, unknown> = z
  .object({
    attributes: z.lazy(() => PlanDataAttributes$zodSchema).optional(),
    id: z.string().optional(),
    type: PlanDataTypePlans$zodSchema.optional(),
  });
